<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.mapper.CommentMapper">

<!--    <resultMap id="replyMap" type="com.nowcoder.community.vo.ReplyVo">-->
<!--        <id column="reply_id" property="id"/>-->
<!--        <result column="reply_content" property="content"/>-->
<!--        <result column="reply_create_time" property="createTime"/>-->
<!--        <association property="author" resultMap="com.nowcoder.community.mapper.UserMapper.userMap"-->
<!--                     columnPrefix="reply_author_"/>-->
<!--        <association property="target" resultMap="com.nowcoder.community.mapper.UserMapper.userMap"-->
<!--                     columnPrefix="reply_target_"/>-->
<!--    </resultMap>-->
    <resultMap id="replyMap" type="com.nowcoder.community.vo.CommentVo">
        <id column="reply_id" property="id"/>
        <result column="reply_content" property="content"/>
        <result column="reply_create_time" property="createTime"/>
        <association property="author" resultMap="com.nowcoder.community.mapper.UserMapper.userMap"
                     columnPrefix="reply_author_"/>
        <association property="target" resultMap="com.nowcoder.community.mapper.UserMapper.userMap"
                     columnPrefix="reply_target_"/>
    </resultMap>

    <resultMap id="commentMap" type="com.nowcoder.community.vo.CommentVo">
        <id property="id" column="comment_id"/>
        <result property="content" column="comment_content"/>
        <result property="createTime" column="comment_create_time"/>
        <result property="replyCount" column="reply_count"/>
        <association property="author" resultMap="com.nowcoder.community.mapper.UserMapper.userMap"
                     columnPrefix="comment_author_"/>
        <!--<collection property="replies" ofType="com.nowcoder.community.vo.ReplyVo" resultMap="replyMap"/>-->
        <collection property="replies" ofType="com.nowcoder.community.vo.CommentVo" resultMap="replyMap"/>
    </resultMap>

    <sql id="insertFields">
        user_id, entity_type, entity_id, target_id, content, status, create_time
    </sql>

    <sql id="selectFields">
        id, <include refid="insertFields"/>
    </sql>

    <select id="selectCommentsByEntity" resultType="com.nowcoder.community.entity.Comment">
        select
        <include refid="selectFields"/>
        from comment_old
        where entity_type = #{entityType} and entity_id = #{entityId}
        limit #{offset}, #{limit}
    </select>

    <select id="selectCommentCountByEntity" resultType="int">
        select count(*)
        from comment_old
        where entity_type = #{entityType}
          and entity_id = #{entityId}
    </select>

    <select id="selectPostCommentsById" resultType="com.nowcoder.community.vo.PostCommentVo">
        select id,
               user_id,
               entity_type,
               entity_id,
               target_id,
               content,
               status,
               create_time
        from comment_old
        where entity_type = 1
          and entity_id = #{entityId}
    </select>

    <select id="selectReply" resultType="com.nowcoder.community.vo.ReplyVo" resultMap="replyMap">
        select reply.*
             , fromUser.username as from_user_username
             , fromUser.email    as from_user_email
             , toUser.username   as to_user_username
             , toUser.email      as to_user_email
        from reply
                 left join user fromUser on reply.from_id = fromUser.id
                 left join user toUser on reply.to_id = toUser.id
        where reply.id = #{id}
    </select>

    <select id="selectCommentById" resultMap="commentMap">
        select `comment`.id              as comment_id
             , `comment`.create_time     as comment_create_time
             , `comment`.content         as comment_content
             , comment_author.id         as comment_author_id
             , comment_author.username   as comment_author_username
             , comment_author.email      as comment_author_email
             , comment_author.header_url as comment_author_header_url
             , reply.id                  as reply_id
             , reply.content             as reply_content
             , reply.create_time         as reply_create_time
             , reply_author.id           as reply_author_id
             , reply_author.username     as reply_author_username
             , reply_author.email        as reply_author_email
             , reply_author.header_url   as reply_author_header_url
             , reply_target.id           as reply_target_id
             , reply_target.username     as reply_target_username
             , reply_target.email        as reply_target_email
             , reply_target.header_url   as reply_target_header_url
        from `comment`
                 left join reply on `comment`.id = reply.comment_id
                 left join `user` comment_author on `comment`.user_id = comment_author.id
                 left join `user` reply_author on reply.from_id = reply_author.id
                 left join `user` reply_target on reply.to_id = reply_target.id
        where `comment`.post_id = #{id}
    </select>


<!--    <insert id="insertComment" parameterType="com.nowcoder.community.entity.Comment">-->
<!--        insert into comment_old(<include refid="insertFields"/>)-->
<!--        values(#{userId}, #{entityType}, #{entityId}, #{targetId}, #{content}, #{status}, #{createTime} )-->
<!--    </insert>-->

<!--    <select id="selectCommentListByPostId" resultMap="commentMap">-->
<!--        select `comment`.id          as comment_id-->
<!--             , `comment`.create_time as comment_create_time-->
<!--             , `comment`.content     as comment_content-->
<!--             , `comment`.user_id     as comment_author_id-->
<!--             , `comment`.reply_count as reply_count-->
<!--             , reply.id              as reply_id-->
<!--             , reply.content         as reply_content-->
<!--             , reply.create_time     as reply_create_time-->
<!--             , reply.from_id         as reply_author_id-->
<!--             , reply.to_id           as reply_target_id-->
<!--        from `comment`-->
<!--                 left join reply on `comment`.id = reply.comment_id-->
<!--        where `comment`.id in (select id-->
<!--                               from (select id-->
<!--                                     from `comment`-->
<!--                                     where post_id = #{postId}-->
<!--                                       and `comment`.`status` = 0-->
<!--                                     order by id asc-->
<!--                                         limit #{offset}, #{limit}) as comment_id_list)-->
<!--          and (select count(*)-->
<!--               from reply r-->
<!--               where r.comment_id = reply.comment_id-->
<!--                 and r.status = 0-->
<!--                 and r.id > reply.id) &lt; #{replyLimit}-->
<!--        order by comment.id asc, reply.id asc-->
<!--    </select>-->


    <select id="selectCommentListByPostId" resultMap="commentMap">
        select `comment`.id          as comment_id
            , `comment`.create_time as comment_create_time
            , `comment`.content     as comment_content
            , `comment`.user_id     as comment_author_id
            , `comment`.reply_count as reply_count
            , reply.id              as reply_id
            , reply.content         as reply_content
            , reply.create_time     as reply_create_time
            , reply.user_id         as reply_author_id
            , reply.target_id       as reply_target_id
        from `comment_old` `comment`
            left join comment_old reply on `comment`.id = reply.parent_id
        where `comment`.id in (select id
                               from (select id
                                     from `comment_old` `comment`
                                     where post_id = #{postId}
                                     and `comment`.`status` = 0
                                     and parent_id is null
                                     order by id asc
                                     limit #{offset}, #{limit}) as comment_id_list)
          and ( select count(*)
                from comment_old r
                where r.parent_id=reply.parent_id
                and r.`status`=0
                and r.id &lt; reply.id) &lt; #{replyLimit}
        order by comment.id asc, reply.id asc
    </select>


    <select id="selectReplyListByCommentId" resultMap="replyMap">
        select reply.id          as reply_id
             , reply.content     as reply_content
             , reply.create_time as reply_create_time
             , reply.user_id     as reply_author_id
             , reply.target_id   as reply_target_id
        from comment_old as reply
        where parent_id = #{commentId}
    </select>


    <!--    <select id="selectCommentListByPostId" resultMap="commentMap">-->
    <!--        select `comment`.id as comment_id-->
    <!--        , `comment`.create_time as comment_create_time-->
    <!--        , `comment`.content as comment_content-->
    <!--        , comment_author.id as comment_author_id-->
    <!--        , comment_author.username as comment_author_username-->
    <!--        , comment_author.email as comment_author_email-->
    <!--        , comment_author.header_url as comment_author_header_url-->
    <!--        , reply.id as reply_id-->
    <!--        , reply.content as reply_content-->
    <!--        , reply.create_time as reply_create_time-->
    <!--        , reply_author.id as reply_author_id-->
    <!--        , reply_author.username as reply_author_username-->
    <!--        , reply_author.email as reply_author_email-->
    <!--        , reply_author.header_url as reply_author_header_url-->
    <!--        , reply_target.id as reply_target_id-->
    <!--        , reply_target.username as reply_target_username-->
    <!--        , reply_target.email as reply_target_email-->
    <!--        , reply_target.header_url as reply_target_header_url-->
    <!--        from `comment`-->
    <!--        left join reply on `comment`.id=reply.comment_id-->
    <!--        left join `user` comment_author on `comment`.user_id=comment_author.id-->
    <!--        left join `user` reply_author on reply.from_id=reply_author.id-->
    <!--        left join `user` reply_target on reply.to_id=reply_target.id-->
    <!--        where `comment`.id in (-->
    <!--        select id from (-->
    <!--            select id from `comment`-->
    <!--            where post_id = #{postId} and `comment`.`status` = 0-->
    <!--            order by id asc-->
    <!--            limit #{offset}, #{limit}-->
    <!--            ) as comment_id_list-->
    <!--        )-->
    <!--        and (-->
    <!--            select count(*) from reply r-->
    <!--            where r.comment_id=reply.comment_id-->
    <!--            and r.status=0 and r.id > reply.id-->
    <!--        ) &lt; #{replyLimit}-->
    <!--        order by comment.id asc, reply.id asc-->
    <!--    </select>-->

</mapper>
